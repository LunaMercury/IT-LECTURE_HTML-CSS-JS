------------------------------------------
동기(synchronus)/비동기(Asynchronous)
------------------------------------------

------------------------------------------
동기
------------------------------------------
코드가 위에서 아래로 순차적으로 실행
이전 작업이 끝나면 다음 작업이 실행
실행 흐름이 직관적이지만 처리시간이 오래걸리는 작업이 있으면 전체 프로그램이 지연될 수 있음

js : 절차대로 처리(Main Thread)
network : 속도 / 데이터단위 / 혼잡제어에 대한 약속
web server : 한페이당 한번에 하나의 요청 / 응답흐름

------------------------------------------
비동기
------------------------------------------
특정 작업이 끝날 때 까지 기다리지 않고 다음 코드가 먼저 실행됨.
시간이 오래 걸리는 작업(예:네트워크 요청, 파일 읽기 등)을 수행할 때 유용함.
콜백(CallBack), 프로미스(Promise), async/await 등을 이용해 처리함.

js : 절차를 지키지 않음(Worker Thread 생성 후 독자적으로 처리 - 실제로 스레드를 나누지 않음)
network : 미리 만들어놓은 약속대로 데이터 전송을 하지 않고, 임의로 지정한 대로 전송
web server : 한페이지당 여러 개의 요청 / 여러 개의 응답(xhr, promise, fetch, ajax, axios 등)


----------------------------------------------
스레드 : 코드를 처리하는 실행흐름

비동기 처리간 우선순위 : async(함수의 헤더에 부여), await(함수 내 비동기 처리 로직에 부여)